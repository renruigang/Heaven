package com.bangqu.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bangqu.greendao.entity.DownLoadTask;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWN_LOAD_TASK".
*/
public class DownLoadTaskDao extends AbstractDao<DownLoadTask, Long> {

    public static final String TABLENAME = "DOWN_LOAD_TASK";

    /**
     * Properties of entity DownLoadTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Download_url = new Property(1, String.class, "download_url", false, "DOWNLOAD_URL");
        public final static Property Download_id = new Property(2, long.class, "download_id", false, "DOWNLOAD_ID");
        public final static Property Save_path = new Property(3, String.class, "save_path", false, "SAVE_PATH");
        public final static Property File_name = new Property(4, String.class, "file_name", false, "FILE_NAME");
    }


    public DownLoadTaskDao(DaoConfig config) {
        super(config);
    }
    
    public DownLoadTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWN_LOAD_TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DOWNLOAD_URL\" TEXT," + // 1: download_url
                "\"DOWNLOAD_ID\" INTEGER NOT NULL ," + // 2: download_id
                "\"SAVE_PATH\" TEXT," + // 3: save_path
                "\"FILE_NAME\" TEXT);"); // 4: file_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWN_LOAD_TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownLoadTask entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String download_url = entity.getDownload_url();
        if (download_url != null) {
            stmt.bindString(2, download_url);
        }
        stmt.bindLong(3, entity.getDownload_id());
 
        String save_path = entity.getSave_path();
        if (save_path != null) {
            stmt.bindString(4, save_path);
        }
 
        String file_name = entity.getFile_name();
        if (file_name != null) {
            stmt.bindString(5, file_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownLoadTask entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String download_url = entity.getDownload_url();
        if (download_url != null) {
            stmt.bindString(2, download_url);
        }
        stmt.bindLong(3, entity.getDownload_id());
 
        String save_path = entity.getSave_path();
        if (save_path != null) {
            stmt.bindString(4, save_path);
        }
 
        String file_name = entity.getFile_name();
        if (file_name != null) {
            stmt.bindString(5, file_name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownLoadTask readEntity(Cursor cursor, int offset) {
        DownLoadTask entity = new DownLoadTask( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // download_url
            cursor.getLong(offset + 2), // download_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // save_path
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // file_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownLoadTask entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDownload_url(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDownload_id(cursor.getLong(offset + 2));
        entity.setSave_path(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFile_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownLoadTask entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownLoadTask entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownLoadTask entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
